{"version":3,"sources":["shared/zoneState.ts","constants.ts","Countdown.tsx","api.tsx","App.tsx","zoneInfo.ts","CoopDoor.tsx","zoneControl.ts","Zone.tsx","reportWebVitals.ts","index.tsx"],"names":["ZoneState","SERVER_ADDRESS","API_LOCATION","WS_LOCATION","DOOR_MOVE_DURATION_MS","Countdown","initial","remaining","children","dir","style","top","className","persistZoneState","zoneInfo","a","console","log","id","state","fetch","then","rsp","json","WsStatus","ws","on","ON","off","OFF","initialZoneInfo","CoopDoor","name","zoneInfos","openZoneInfo","closeZoneInfo","React","useState","undefined","setRemaining","oc","setOc","run","zone","duration","stepCallback","step","msRemaining","setTimeout","interval","setInterval","clearInterval","runZone","handleRemaining","onClick","Zone","zoneState","toggleState","initialInfos","i","push","produce","draft","App","setZoneInfos","CONNECTING","wsStatus","setWsStatus","useEffect","ERROR","WebSocket","onopen","send","JSON","stringify","msg","OPEN","onmessage","message","data","parse","e","Error","updatedZoneInfos","onclose","CLOSED","onerror","close","filter","z","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eea8bfad.chunk.js","sourcesContent":["export enum ZoneState {\n    ON = 'on',\n    OFF = 'off',\n}\n\nexport const toggleZoneState = (zoneState: ZoneState): ZoneState => {\n    return zoneState === ZoneState.ON ? ZoneState.OFF : ZoneState.ON\n}","const WS_PORT = 1337;\nconst REST_PORT = 3217;\n\n// export const SERVER_ADDRESS = 'localhost';\nexport const SERVER_ADDRESS = '10.0.0.28';\nexport const API_LOCATION = `http://${SERVER_ADDRESS}:${REST_PORT}`;\nexport const WS_LOCATION = `ws://${SERVER_ADDRESS}:${WS_PORT}`;\nexport const NUM_ZONES = 8;\n\nconst ONE_SEC_IN_MS = 1000;\nexport const DOOR_MOVE_DURATION_MS = 30 * ONE_SEC_IN_MS;\n","import React from 'react';\nimport { milliseconds } from \"./shared/time\";\nimport './countdown.css';\n\nexport const Countdown = ({ initial, remaining, children, dir = 'down' }: { initial: milliseconds, remaining: milliseconds, children?: JSX.Element | string, dir?: 'down' | 'up' }) => {\n    const style = dir === 'down' ? {top: `${100 - (remaining/initial)*100}%`} : {top: `${(remaining/initial)*100}%`}\n    return  <div className=\"countdown\">\n        <div className=\"countdown-phaser\" style={style}></div>\n        <div className=\"countdown-children\">{children}</div>\n    </div>;\n}","import { API_LOCATION } from \"./constants\";\nimport { ZoneInfo } from \"./zoneInfo\";\n\nexport const persistZoneState = async (zoneInfo: ZoneInfo):Promise<ZoneInfo> => {\n    console.log('Would have called', zoneInfo, `fetch(${API_LOCATION}/channel/${zoneInfo.id}/${zoneInfo.state}).then(rsp => rsp.json());`);\n    // return Promise.resolve(zoneInfo)\n    return fetch(`${API_LOCATION}/channel/${zoneInfo.id}/${zoneInfo.state}`).then(rsp => rsp.json());\n}\n","import produce from 'immer';\nimport React from 'react';\nimport './App.css';\nimport { NUM_ZONES, WS_LOCATION } from './constants';\nimport { CoopDoor } from './CoopDoor';\nimport { Zone } from './Zone';\nimport { initialZoneInfo, ZoneInfo } from './zoneInfo';\n\nlet initialInfos: ZoneInfo[] = [];\n\nfor (let i = 1; i <= NUM_ZONES; i++) {\n    initialInfos.push(produce(initialZoneInfo, draft => { draft.id = i }));\n}\n\nenum WsStatus {\n    CONNECTING = 'connecting',\n    OPEN = 'open',\n    CLOSED = 'closed',\n    ERROR = 'error',\n}\n\nlet ws: WebSocket;\n\nfunction App() {\n    const [zoneInfos, setZoneInfos] = React.useState<ZoneInfo[]>(initialInfos);\n    const [wsStatus, setWsStatus] = React.useState<WsStatus>(WsStatus.CONNECTING);\n\n    React.useEffect(() => {\n        if (wsStatus === WsStatus.ERROR || ws) return;\n\n        ws = new WebSocket(WS_LOCATION);\n        ws.onopen = () => {\n            ws.send(JSON.stringify({ id: undefined, msg: 'Client connected!' }));\n            setWsStatus(WsStatus.OPEN);\n        };\n\n        ws.onmessage = (message: any) => {\n            if (!(message || message.data)) {\n                console.log('Error receving ws message or message data', message);\n            }\n            let zoneInfo: ZoneInfo;\n            try {\n                zoneInfo = JSON.parse(message.data);\n            } catch (e) {\n                console.log('Error parsing message.data from websockets');\n                throw new Error(e);\n            }\n\n            const updatedZoneInfos = produce(zoneInfos, draft => { draft[zoneInfo.id - 1] = zoneInfo });\n            setZoneInfos(updatedZoneInfos);\n        };\n        ws.onclose = () => setWsStatus(WsStatus.CLOSED);\n        ws.onerror = () => {\n            ws.close();\n            setWsStatus(WsStatus.ERROR);\n        }\n    }, [wsStatus, zoneInfos])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1 className=\"title\">Martins' Sprinklers</h1>\n            </header>\n            \n            <div className=\"controls\">\n                <CoopDoor name=\"Chickens\" zoneInfos={[zoneInfos[6], zoneInfos[5] ]} />\n                <CoopDoor name=\"Ducks\" zoneInfos={[zoneInfos[7], zoneInfos[8]]} />\n                {\n                    zoneInfos\n                        .filter((z: ZoneInfo) => z.id <= 4) // zones 5-8 are for coop doors\n                        .map((z: ZoneInfo) => <Zone key={z.id} zoneInfo={z} />)\n                }\n            </div>\n            \n            <div className=\"ws-status\">ws: {wsStatus}</div>\n        </div>\n    );\n}\n\nexport default App;\n","import { toggleZoneState, ZoneState } from \"./shared/zoneState\";\n\nexport const toggleState = (zoneInfo: ZoneInfo): ZoneInfo => {\n    return {\n        ...zoneInfo,\n        state: toggleZoneState(zoneInfo.state),\n    };\n}\n\nexport const on = (zoneInfo: ZoneInfo): ZoneInfo => {\n    return {\n        ...zoneInfo,\n        state: ZoneState.ON,\n    };\n}\n\nexport const off = (zoneInfo: ZoneInfo): ZoneInfo => {\n    return {\n        ...zoneInfo,\n        state: ZoneState.OFF,\n    };\n}\n\nexport interface ZoneInfo {\n    id: number,\n    state: ZoneState,\n}\n\nexport const initialZoneInfo: ZoneInfo = {\n    id: 0,\n    state: ZoneState.OFF,\n}\n\n","import React from 'react';\nimport { DOOR_MOVE_DURATION_MS } from './constants';\nimport { milliseconds } from \"./shared/time\";\nimport './coopDoor.css';\nimport { Countdown } from './Countdown';\nimport { runZone } from './zoneControl';\nimport { ZoneInfo } from './zoneInfo';\n\n\nexport const CoopDoor = ({name, zoneInfos}: {name: string, zoneInfos: [ZoneInfo, ZoneInfo]}) => {\n    const openZoneInfo: ZoneInfo = zoneInfos[0];\n    const closeZoneInfo: ZoneInfo = zoneInfos[1];\n    const [remaining, setRemaining] = React.useState<milliseconds|undefined>(undefined);\n    const [oc, setOc] = React.useState<'opening' | 'closing' | undefined>(undefined);\n\n    const run = (zoneInfo: ZoneInfo) => {\n        if (!(remaining && remaining > 0)) {\n            runZone(zoneInfo, DOOR_MOVE_DURATION_MS, handleRemaining);\n        }\n    }\n\n    const handleRemaining = (remaining: milliseconds) => {\n        if (remaining && remaining > 0) {\n            setRemaining(remaining);\n        } else {\n            setRemaining(undefined);\n            setOc(undefined);\n        }\n    }\n\n    return <div className=\"coop-door\">\n        <div className=\"coop-door_open btn\" onClick={() => { setOc('opening'); run(openZoneInfo); }}>\n            {remaining && oc === 'opening' ? <Countdown initial={DOOR_MOVE_DURATION_MS} remaining={remaining} dir=\"up\">Open</Countdown> : 'Open'}\n        </div>\n        {name} {remaining ? `${remaining/1000}s`: null}\n        <div className=\"coop-door_close btn\" onClick={() => { setOc('closing'); run(closeZoneInfo); }}>\n            {remaining && oc === 'closing' ? <Countdown initial={DOOR_MOVE_DURATION_MS} remaining={remaining}>Close</Countdown> : 'Close'}\n        </div>\n    </div>\n}","import { persistZoneState } from \"./api\";\nimport { milliseconds } from \"./shared/time\";\nimport { off, on, ZoneInfo } from \"./zoneInfo\";\n\nexport const runZone = (zone: ZoneInfo, duration: milliseconds, stepCallback: (remaining: milliseconds) => void, step: milliseconds = 1000) => {\n    let msRemaining = duration;\n    persistZoneState(on(zone));\n    setTimeout(() => {\n        persistZoneState(off(zone));\n    }, duration);\n    \n    stepCallback(msRemaining);\n    const interval = setInterval(() => {\n        if (msRemaining <= 0) {\n            clearInterval(interval);\n        } else {\n            msRemaining = msRemaining - step;\n            stepCallback(msRemaining);\n        }\n    }, step);\n}","import { persistZoneState } from './api';\nimport { ZoneInfo } from './zoneInfo';\nimport { toggleState } from './zoneInfo';\nimport './zone.css';\n\nexport const Zone = ({zoneInfo}: {zoneInfo: ZoneInfo}) => {\n    return <div\n        className={`zone btn ${zoneInfo.state}`}\n        onClick={() => persistZoneState(toggleState(zoneInfo))}\n    >\n        Zone {zoneInfo.id}\n    </div>\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}